;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 4/6/2020
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <io.h>
;
;#define lcd_ddr DDRB
;#define lcd_port PORTB
;#define lcd_control_ddr DDRA
;#define lcd_control_port PORTA
;#define RS 6
;#define RW 1
;#define EN 7
;#define KEYPAD_DDR DDRC
;#define KEYPAD_PORT PORTC
;#define KEYPAD_PIN PINC
;
;// Declare your global variables here
;unsigned char received_string[40];
;unsigned char sending_string[40];
;unsigned char message_string[17];
;unsigned char i = 0;
;unsigned char j = 0;
;unsigned char sending = 0;
;unsigned char sender_set = 0;
;unsigned char MY_ID;
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 16
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index=0,rx_rd_index=0;
;#else
;unsigned int rx_wr_index=0,rx_rd_index=0;
;#endif
;
;#if RX_BUFFER_SIZE < 256
;unsigned char rx_counter=0;
;#else
;unsigned int rx_counter=0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 004C {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 004D char status,data;
; 0000 004E status=UCSRA;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 004F data=UDR;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0050 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0051    {
; 0000 0052    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0053 #if RX_BUFFER_SIZE == 256
; 0000 0054    // special case for receiver buffer size=256
; 0000 0055    if (++rx_counter == 0) rx_buffer_overflow=1;
; 0000 0056 #else
; 0000 0057    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0058    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0059       {
; 0000 005A       rx_counter=0;
;PCODE: $00000026 VOL: 0
; 0000 005B       rx_buffer_overflow=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 005C       }
; 0000 005D #endif
; 0000 005E    }
;PCODE: $0000002A VOL: 0
; 0000 005F }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0066 {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0067 char data;
; 0000 0068 while (rx_counter==0);
;PCODE: $00000032 VOL: 0
;	data -> R17
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0069 data=rx_buffer[rx_rd_index++];
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 006A #if RX_BUFFER_SIZE != 256
; 0000 006B if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 006C #endif
; 0000 006D #asm("cli")
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
	cli
;PCODE: $00000043 VOL: 0
; 0000 006E --rx_counter;
;PCODE: $00000044 VOL: 0
; 0000 006F #asm("sei")
;PCODE: $00000045 VOL: 0
	sei
;PCODE: $00000046 VOL: 0
; 0000 0070 return data;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0071 }
;PCODE: $0000004A VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 16
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE <= 256
;unsigned char tx_wr_index=0,tx_rd_index=0;
;#else
;unsigned int tx_wr_index=0,tx_rd_index=0;
;#endif
;
;#if TX_BUFFER_SIZE < 256
;unsigned char tx_counter=0;
;#else
;unsigned int tx_counter=0;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 0087 {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0088 if (tx_counter)
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0089    {
; 0000 008A    --tx_counter;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 008B    UDR=tx_buffer[tx_rd_index++];
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 008C #if TX_BUFFER_SIZE != 256
; 0000 008D    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 008E #endif
; 0000 008F    }
;PCODE: $0000005D VOL: 0
; 0000 0090 }
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 0097 {
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0098 while (tx_counter == TX_BUFFER_SIZE);
;PCODE: $00000064 VOL: 0
;	c -> Y+0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0099 #asm("cli")
;PCODE: $0000006B VOL: 0
	cli
;PCODE: $0000006C VOL: 0
; 0000 009A if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 009B    {
; 0000 009C    tx_buffer[tx_wr_index++]=c;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 009D #if TX_BUFFER_SIZE != 256
; 0000 009E    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 009F #endif
; 0000 00A0    ++tx_counter;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00A1    }
; 0000 00A2 else
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00A3    UDR=c;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00A4 #asm("sei")
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
	sei
;PCODE: $00000089 VOL: 0
; 0000 00A5 }
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;void lcd_send_cmd(unsigned char cmd);
;void lcd_send_char(unsigned char sentCharacter);
;void lcd_clear();
;void lcd_send_string(char sentString[]);
;
;void lcd_init(){
; 0000 00B1 void lcd_init(){
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00B2     lcd_ddr = 0xff;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00B3     lcd_control_ddr |= (1<<RS) | (1<<RW) | (1<<EN);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00B4 	lcd_send_cmd(0x0E);
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00B5 	lcd_send_cmd(0x38);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00B6 	lcd_clear();
;PCODE: $00000098 VOL: 0
; 0000 00B7 	delay_ms(50);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00B8 	lcd_clear();
;PCODE: $0000009C VOL: 0
; 0000 00B9 }
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;
;void lcd_send_cmd(unsigned char cmd){
; 0000 00BB void lcd_send_cmd(unsigned char cmd){
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00BC 	lcd_port = cmd;
;PCODE: $000000A1 VOL: 0
;	cmd -> Y+0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00BD 	lcd_control_port &= ~(1<<RS);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00BE 	lcd_control_port &= ~(1<<RW);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00BF 	lcd_control_port |=  (1<<EN);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00C0 	delay_us(700);
;PCODE: $000000AA VOL: 0
; 0000 00C1 	lcd_control_port &= ~(1<<EN);
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00C2 }
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;
;void lcd_send_char(unsigned char sentCharacter){
; 0000 00C4 void lcd_send_char(unsigned char sentCharacter){
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00C5 	lcd_port = sentCharacter;
;PCODE: $000000B2 VOL: 0
;	sentCharacter -> Y+0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00C6 	lcd_control_port |=  (1<<RS);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00C7 	lcd_control_port &= ~(1<<RW);
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00C8 	lcd_control_port |=  (1<<EN);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00C9 	delay_us(700);
;PCODE: $000000BB VOL: 0
; 0000 00CA 	lcd_control_port &= ~(1<<EN);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00CB }
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;
;void lcd_send_string(char sentString[]){
; 0000 00CD void lcd_send_string(char sentString[]){
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00CE 	unsigned char  i = 0;
; 0000 00CF 	while (sentString[i]!='\0')
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;	sentString -> Y+1
;	i -> R17
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00D0 	{
; 0000 00D1 		lcd_send_char(sentString[i]);
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00D2 		i++;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00D3 	}
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00D4 }
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;
;void lcd_clear(){
; 0000 00D6 void lcd_clear(){
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00D7 	lcd_send_cmd(0x01);
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00D8 }
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;
;void lcd_go_to_xy(unsigned char x,unsigned char y){
; 0000 00DA void lcd_go_to_xy(unsigned char x,unsigned char y){
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00DB 	if(x == 0){
;PCODE: $000000E2 VOL: 0
;	x -> Y+1
;	y -> Y+0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00DC 		lcd_send_cmd(0x80+y);
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00DD 	}
; 0000 00DE     else if (x == 1){
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00DF 		lcd_send_cmd(0xC0+y);
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00E0 	}
; 0000 00E1 }
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;
;void show_message(unsigned char* string){
; 0000 00E3 void show_message(unsigned char* string){
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00E4     lcd_clear();
;PCODE: $000000F8 VOL: 0
;	*string -> Y+0
;PCODE: $000000F9 VOL: 0
; 0000 00E5     message_string[0] = 'S';
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00E6     message_string[1] = 'n';
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00E7     message_string[2] = 'd';
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 00E8     message_string[3] = 'r';
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00E9     message_string[4] = ':';
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 00EA     message_string[5] = '\0';
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00EB     lcd_send_string(message_string);
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00EC     lcd_send_char(string[0]);
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00ED     message_string[0] = ' ';
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00EE     message_string[1] = ' ';
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00EF     message_string[2] = '\0';
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00F0     lcd_send_string(message_string);
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00F1     message_string[0] = 'R';
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00F2     message_string[1] = 'c';
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00F3     message_string[2] = 'v';
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00F4     message_string[3] = 'r';
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00F5     message_string[4] = ':';
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 00F6     message_string[5] = '\0';
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00F7     lcd_send_string(message_string);
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00F8     lcd_send_char(string[1]);
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00F9     lcd_go_to_xy(1, 0);
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 00FA     lcd_send_char('M');
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00FB     lcd_send_char('=');
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00FC     lcd_send_string(string+2);
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00FD }
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;
;void show_sending(){
; 0000 00FF void show_sending(){
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 0100     unsigned char string[17];
; 0000 0101     lcd_clear();
;PCODE: $00000140 VOL: 0
;	string -> Y+0
;PCODE: $00000141 VOL: 0
; 0000 0102     string[0] = 'S';
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 0103     string[1] = 'e';
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 0104     string[2] = 'n';
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 0105     string[3] = 'd';
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 0106     string[4] = 'i';
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 0107     string[5] = 'n';
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 0108     string[6] = 'g';
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 0109     string[7] = ' ';
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 010A     string[8] = 'M';
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 010B     string[9] = 'e';
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 010C     string[10] = 's';
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 010D     string[11] = 's';
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 010E     string[12] = 'a';
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 010F     string[13] = 'g';
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 0110     string[14] = 'e';
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 0111     string[15] = '!';
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 0112     string[16] = '\0';
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 0113     lcd_go_to_xy(0, 0);
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 0114     lcd_send_string(string);
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 0115     delay_ms(100);
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 0116     lcd_clear();
;PCODE: $0000016D VOL: 0
; 0000 0117 }
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;
;void send(unsigned char* string){
; 0000 0119 void send(unsigned char* string){
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 011A     unsigned char k=0;
; 0000 011B     while (string[k] != '#'){
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;	*string -> Y+1
;	k -> R17
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 011C         putchar(string[k]);
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 011D         k += 1;
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 011E     }
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 011F     putchar(string[k]);
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 0120     //putchar('\0');
; 0000 0121 }
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;
;void process(unsigned char* string){
; 0000 0123 void process(unsigned char* string){
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0124     if (string[1] == ('0' + MY_ID)){
;PCODE: $00000190 VOL: 0
;	*string -> Y+0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 0125         show_message(string);
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 0126     }
; 0000 0127     else{
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 0128         show_sending();
;PCODE: $0000019D VOL: 0
; 0000 0129         send(string);
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 012A     }
;PCODE: $000001A0 VOL: 0
; 0000 012B }
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;
;void receive(){
; 0000 012D void receive(){
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 012E     unsigned char d;
; 0000 012F     if (rx_counter == 0){
;PCODE: $000001A6 VOL: 0
;	d -> R17
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 0130         return;
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 0131     }
; 0000 0132     d = getchar();
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 0133     if (d == '#'){
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 0134         received_string[i] = d;
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 0135         i += 1;
;PCODE: $000001B5 VOL: 0
; 0000 0136         received_string[i] = '\0';
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 0137         i = 0;
;PCODE: $000001BB VOL: 0
; 0000 0138         process(received_string);
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 0139 
; 0000 013A     }
; 0000 013B     else{
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 013C         received_string[i] = d;
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 013D         i += 1;
;PCODE: $000001C4 VOL: 0
; 0000 013E     }
;PCODE: $000001C5 VOL: 0
; 0000 013F }
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;
;unsigned char GetKeyPressed(){
; 0000 0141 unsigned char GetKeyPressed(){
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 0142     unsigned char r,c;
; 0000 0143     KEYPAD_PORT |= 0X0F;
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;	r -> R17
;	c -> R16
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 0144     for(c=0;c<3;c++){
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 0145         KEYPAD_DDR &= ~(0X7F);
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 0146         KEYPAD_DDR |= (0X40>>c);
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 0147         for(r=0;r<4;r++){
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 0148             if(!(KEYPAD_PIN & (0X08>>r))){
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 0149                 return (r*3+c);
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 014A             }
; 0000 014B         }
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0000 014C     }
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 014D     return 0XFF;//Indicate No key pressed
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 014E }
;PCODE: $00000206 VOL: 0
;
;void receive_command(){
; 0000 0150 void receive_command(){
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 0151   unsigned char keypressed = GetKeyPressed();
; 0000 0152   delay_ms(30);
;PCODE: $00000209 VOL: 0
;	keypressed -> R17
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 0153   if (keypressed==0){
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 0154     if (sending == 2){
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 0155     sending_string[j] = '1';
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 0156     j++;
;PCODE: $00000219 VOL: 0
; 0000 0157     lcd_send_char('1');
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 0158     }
; 0000 0159     if (sending == 1){
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 015A         if (sender_set == 0){
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 015B             sending_string[j] = '1';
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 015C             j++;
;PCODE: $00000227 VOL: 0
; 0000 015D             lcd_send_char('1');
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 015E             sender_set = 1;
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 015F         }
; 0000 0160     }
;PCODE: $0000022C VOL: 0
; 0000 0161   }
;PCODE: $0000022D VOL: 0
; 0000 0162   if (keypressed==3){
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 0163     if (sending == 2){
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 0164         sending_string[j] = '4';
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 0165         j++;
;PCODE: $0000023A VOL: 0
; 0000 0166         lcd_send_char('4');
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 0167     }
; 0000 0168     if (sending == 1){
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 0169         if (sender_set == 0){
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0000 016A             sending_string[j] = '4';
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 016B             j++;
;PCODE: $00000248 VOL: 0
; 0000 016C             lcd_send_char('4');
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0000 016D             sender_set = 1;
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0000 016E         }
; 0000 016F     }
;PCODE: $0000024D VOL: 0
; 0000 0170   }
;PCODE: $0000024E VOL: 0
; 0000 0171   if (keypressed==6){
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0000 0172     if (sending == 2){
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 0173         sending_string[j] = '7';
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0000 0174         j++;
;PCODE: $0000025B VOL: 0
; 0000 0175         lcd_send_char('7');
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 0176     }
; 0000 0177     if (sending == 1){
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0000 0178         if (sender_set == 0){
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 0179             sending_string[j] = '7';
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 017A             j++;
;PCODE: $00000269 VOL: 0
; 0000 017B             lcd_send_char('7');
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0000 017C             sender_set = 1;
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 017D         }
; 0000 017E     }
;PCODE: $0000026E VOL: 0
; 0000 017F   }
;PCODE: $0000026F VOL: 0
; 0000 0180   if (keypressed==9){
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0000 0181     if (sending == 2){
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 0182         sending_string[j] = '*';
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0000 0183         j++;
;PCODE: $0000027C VOL: 0
; 0000 0184         lcd_send_char('*');
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 0000 0185     }
; 0000 0186     else if (sending == 0){
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0000 0187         sending = 1;
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0000 0188         sending_string[0] = '0' + MY_ID;
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0000 0189         j = 1;
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0000 018A         lcd_clear();
;PCODE: $0000028A VOL: 0
; 0000 018B         lcd_send_char('=');
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
; 0000 018C     }
; 0000 018D     else{
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
; 0000 018E         if (sender_set == 1){
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 018F             sending = 2;
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 0190             lcd_send_char('*');
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
; 0000 0191         }
; 0000 0192     }
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
; 0000 0193   }
; 0000 0194   if (keypressed==1){
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0000 0195     if (sending == 2){
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 0196         sending_string[j] = '2';
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0000 0197         j++;
;PCODE: $000002A5 VOL: 0
; 0000 0198         lcd_send_char('2');
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0000 0199     }
; 0000 019A     if (sending == 1){
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 019B         if (sender_set == 0){
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0000 019C             sending_string[j] = '2';
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
; 0000 019D             j++;
;PCODE: $000002B3 VOL: 0
; 0000 019E             lcd_send_char('2');
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 019F             sender_set = 1;
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 01A0         }
; 0000 01A1     }
;PCODE: $000002B8 VOL: 0
; 0000 01A2   }
;PCODE: $000002B9 VOL: 0
; 0000 01A3   if (keypressed==4){
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0000 01A4     if (sending == 2){
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0000 01A5         sending_string[j] = '5';
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0000 01A6         j++;
;PCODE: $000002C6 VOL: 0
; 0000 01A7         lcd_send_char('5');
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0000 01A8     }
; 0000 01A9     if (sending == 1){
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
; 0000 01AA         if (sender_set == 0){
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
; 0000 01AB             sending_string[j] = '5';
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 01AC             j++;
;PCODE: $000002D4 VOL: 0
; 0000 01AD             lcd_send_char('5');
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
; 0000 01AE             sender_set = 1;
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
; 0000 01AF         }
; 0000 01B0     }
;PCODE: $000002D9 VOL: 0
; 0000 01B1   }
;PCODE: $000002DA VOL: 0
; 0000 01B2   if (keypressed==7){
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
; 0000 01B3     if (sending == 2){
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0000 01B4         sending_string[j] = '8';
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
; 0000 01B5         j++;
;PCODE: $000002E7 VOL: 0
; 0000 01B6         lcd_send_char('8');
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 01B7     }
; 0000 01B8     if (sending == 1){
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0000 01B9         if (sender_set == 0){
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
; 0000 01BA             sending_string[j] = '8';
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 01BB             j++;
;PCODE: $000002F5 VOL: 0
; 0000 01BC             lcd_send_char('8');
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
; 0000 01BD             sender_set = 1;
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
; 0000 01BE         }
; 0000 01BF     }
;PCODE: $000002FA VOL: 0
; 0000 01C0   }
;PCODE: $000002FB VOL: 0
; 0000 01C1   if (keypressed==10){
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
; 0000 01C2     if (sending == 2){
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 0000 01C3         sending_string[j] = '0';
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
; 0000 01C4         j++;
;PCODE: $00000308 VOL: 0
; 0000 01C5         lcd_send_char('0');
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
; 0000 01C6     }
; 0000 01C7     if (sending == 1){
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
; 0000 01C8         if (sender_set == 0){
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
; 0000 01C9             sending_string[j] = '0';
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
; 0000 01CA             j++;
;PCODE: $00000316 VOL: 0
; 0000 01CB             lcd_send_char('0');
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
; 0000 01CC             sender_set = 1;
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
; 0000 01CD         }
; 0000 01CE     }
;PCODE: $0000031B VOL: 0
; 0000 01CF   }
;PCODE: $0000031C VOL: 0
; 0000 01D0   if (keypressed==2){
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
; 0000 01D1     if (sending == 2){
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
; 0000 01D2         sending_string[j] = '3';
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
; 0000 01D3         j++;
;PCODE: $00000329 VOL: 0
; 0000 01D4         lcd_send_char('3');
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
; 0000 01D5     }
; 0000 01D6     if (sending == 1){
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
; 0000 01D7         if (sender_set == 0){
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0000 01D8             sending_string[j] = '3';
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
; 0000 01D9             j++;
;PCODE: $00000337 VOL: 0
; 0000 01DA             lcd_send_char('3');
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
; 0000 01DB             sender_set = 1;
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
; 0000 01DC         }
; 0000 01DD     }
;PCODE: $0000033C VOL: 0
; 0000 01DE   }
;PCODE: $0000033D VOL: 0
; 0000 01DF   if (keypressed==5){
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
; 0000 01E0     if (sending == 2){
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
; 0000 01E1         sending_string[j] = '6';
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
; 0000 01E2         j++;
;PCODE: $0000034A VOL: 0
; 0000 01E3         lcd_send_char('6');
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
; 0000 01E4     }
; 0000 01E5     if (sending == 1){
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
; 0000 01E6         if (sender_set == 0){
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
; 0000 01E7             sending_string[j] = '6';
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
; 0000 01E8             j++;
;PCODE: $00000358 VOL: 0
; 0000 01E9             lcd_send_char('6');
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
; 0000 01EA             sender_set = 1;
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
; 0000 01EB         }
; 0000 01EC     }
;PCODE: $0000035D VOL: 0
; 0000 01ED   }
;PCODE: $0000035E VOL: 0
; 0000 01EE   if (keypressed==8){
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
; 0000 01EF     if (sending == 2){
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
; 0000 01F0         sending_string[j] = '9';
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
; 0000 01F1         j++;
;PCODE: $0000036B VOL: 0
; 0000 01F2         lcd_send_char('9');
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
; 0000 01F3     }
; 0000 01F4     if (sending == 1){
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
; 0000 01F5         if (sender_set == 0){
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
; 0000 01F6             sending_string[j] = '9';
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
; 0000 01F7             j++;
;PCODE: $00000379 VOL: 0
; 0000 01F8             lcd_send_char('9');
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
; 0000 01F9             sender_set = 1;
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
; 0000 01FA         }
; 0000 01FB     }
;PCODE: $0000037E VOL: 0
; 0000 01FC   }
;PCODE: $0000037F VOL: 0
; 0000 01FD   if (keypressed==11){
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
; 0000 01FE     if (sending == 2){
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
; 0000 01FF         sending_string[j] = '#';
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
; 0000 0200         j++;
;PCODE: $0000038C VOL: 0
; 0000 0201         sending_string[j] == '\0';
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
; 0000 0202         j++;
;PCODE: $00000393 VOL: 0
; 0000 0203         sending = 0;
;PCODE: $00000394 VOL: 0
; 0000 0204         sender_set = 0;
;PCODE: $00000395 VOL: 0
; 0000 0205         process(sending_string);
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
; 0000 0206     }
; 0000 0207   }
;PCODE: $00000398 VOL: 0
; 0000 0208 }
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;
;void set_my_id(){
; 0000 020A void set_my_id(){
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
; 0000 020B     unsigned char keypressed;
; 0000 020C     lcd_clear();
;PCODE: $0000039F VOL: 0
;	keypressed -> R17
;PCODE: $000003A0 VOL: 0
; 0000 020D     message_string[0] = 'E';
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
; 0000 020E     message_string[1] = 'n';
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
; 0000 020F     message_string[2] = 't';
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
; 0000 0210     message_string[3] = 'e';
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
; 0000 0211     message_string[4] = 'r';
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
; 0000 0212     message_string[5] = ' ';
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
; 0000 0213     message_string[6] = 'M';
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
; 0000 0214     message_string[7] = 'Y';
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
; 0000 0215     message_string[8] = ' ';
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
; 0000 0216     message_string[9] = 'I';
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
; 0000 0217     message_string[10] = 'D';
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
; 0000 0218     message_string[11] = ':';
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
; 0000 0219     message_string[12] = '\0';
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
; 0000 021A     lcd_go_to_xy(0, 2);
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
; 0000 021B     lcd_send_string(message_string);
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
; 0000 021C     do  {
;PCODE: $000003CD VOL: 0
; 0000 021D         keypressed = GetKeyPressed();
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
; 0000 021E     }
; 0000 021F     while (keypressed==0xFF || keypressed==9 || keypressed==11);
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
; 0000 0220     switch (keypressed) {
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
; 0000 0221     case 0:{
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
; 0000 0222         keypressed=1;
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
; 0000 0223         break;
;PCODE: $000003E4 VOL: 0
; 0000 0224     }
; 0000 0225     case 1:{
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
; 0000 0226         keypressed=2;
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
; 0000 0227         break;
;PCODE: $000003EA VOL: 0
; 0000 0228     }case 2:{
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
; 0000 0229         keypressed=3;
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
; 0000 022A         break;
;PCODE: $000003F0 VOL: 0
; 0000 022B     }case 3:{
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
; 0000 022C         keypressed=4;
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
; 0000 022D         break;
;PCODE: $000003F6 VOL: 0
; 0000 022E     }case 4:{
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
; 0000 022F         keypressed=5;
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
; 0000 0230         break;
;PCODE: $000003FC VOL: 0
; 0000 0231     }case 5:{
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
; 0000 0232         keypressed=6;
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
; 0000 0233         break;
;PCODE: $00000402 VOL: 0
; 0000 0234     }case 6:{
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
; 0000 0235         keypressed=7;
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
; 0000 0236         break;
;PCODE: $00000408 VOL: 0
; 0000 0237     }case 7:{
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
; 0000 0238         keypressed=8;
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
; 0000 0239         break;
;PCODE: $0000040E VOL: 0
; 0000 023A     }case 8:{
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
; 0000 023B         keypressed=9;
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
; 0000 023C         break;
;PCODE: $00000414 VOL: 0
; 0000 023D     }case 10:{
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
; 0000 023E         keypressed=0;
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
; 0000 023F         break;
;PCODE: $0000041A VOL: 0
; 0000 0240     }
; 0000 0241     };
;PCODE: $0000041B VOL: 0
; 0000 0242     MY_ID = keypressed;
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
; 0000 0243     message_string[0] = 'I';
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
; 0000 0244     message_string[1] = 'D';
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
; 0000 0245     message_string[2] = ' ';
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
; 0000 0246     message_string[3] = 's';
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
; 0000 0247     message_string[4] = 'e';
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
; 0000 0248     message_string[5] = 't';
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
; 0000 0249     message_string[6] = ' ';
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
; 0000 024A     message_string[7] = 't';
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
; 0000 024B     message_string[8] = 'o';
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
; 0000 024C     message_string[9] = ':';
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
; 0000 024D     message_string[10] = ' ';
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
; 0000 024E     message_string[11] = '\0';
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
; 0000 024F     lcd_go_to_xy(1, 0);
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
; 0000 0250     lcd_send_string(message_string);
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
; 0000 0251     lcd_send_char('0'+keypressed);
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
; 0000 0252     delay_ms(100);
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
; 0000 0253 }
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
;
;void main(void)
; 0000 0256 {
;PCODE: $00000450 VOL: 0
; 0000 0257 // Declare your local variables here
; 0000 0258 
; 0000 0259 // Input/Output Ports initialization
; 0000 025A // Port A initialization
; 0000 025B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 025C DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
; 0000 025D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 025E PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
; 0000 025F 
; 0000 0260 // Port B initialization
; 0000 0261 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0262 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
; 0000 0263 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0264 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
; 0000 0265 
; 0000 0266 // Port C initialization
; 0000 0267 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0268 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
; 0000 0269 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 026A PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
; 0000 026B 
; 0000 026C // Port D initialization
; 0000 026D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 026E DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
; 0000 026F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0270 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
; 0000 0271 
; 0000 0272 // Timer/Counter 0 initialization
; 0000 0273 // Clock source: System Clock
; 0000 0274 // Clock value: Timer 0 Stopped
; 0000 0275 // Mode: Normal top=0xFF
; 0000 0276 // OC0 output: Disconnected
; 0000 0277 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
; 0000 0278 TCNT0=0x00;
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
; 0000 0279 OCR0=0x00;
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
; 0000 027A 
; 0000 027B // Timer/Counter 1 initialization
; 0000 027C // Clock source: System Clock
; 0000 027D // Clock value: Timer1 Stopped
; 0000 027E // Mode: Normal top=0xFFFF
; 0000 027F // OC1A output: Disconnected
; 0000 0280 // OC1B output: Disconnected
; 0000 0281 // Noise Canceler: Off
; 0000 0282 // Input Capture on Falling Edge
; 0000 0283 // Timer1 Overflow Interrupt: Off
; 0000 0284 // Input Capture Interrupt: Off
; 0000 0285 // Compare A Match Interrupt: Off
; 0000 0286 // Compare B Match Interrupt: Off
; 0000 0287 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
; 0000 0288 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
; 0000 0289 TCNT1H=0x00;
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
; 0000 028A TCNT1L=0x00;
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
; 0000 028B ICR1H=0x00;
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
; 0000 028C ICR1L=0x00;
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
; 0000 028D OCR1AH=0x00;
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
; 0000 028E OCR1AL=0x00;
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
; 0000 028F OCR1BH=0x00;
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
; 0000 0290 OCR1BL=0x00;
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
; 0000 0291 
; 0000 0292 // Timer/Counter 2 initialization
; 0000 0293 // Clock source: System Clock
; 0000 0294 // Clock value: Timer2 Stopped
; 0000 0295 // Mode: Normal top=0xFF
; 0000 0296 // OC2 output: Disconnected
; 0000 0297 ASSR=0<<AS2;
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
; 0000 0298 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
; 0000 0299 TCNT2=0x00;
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
; 0000 029A OCR2=0x00;
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
; 0000 029B 
; 0000 029C // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 029D TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
; 0000 029E 
; 0000 029F // External Interrupt(s) initialization
; 0000 02A0 // INT0: Off
; 0000 02A1 // INT1: Off
; 0000 02A2 // INT2: Off
; 0000 02A3 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
; 0000 02A4 MCUCSR=(0<<ISC2);
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
; 0000 02A5 
; 0000 02A6 // USART initialization
; 0000 02A7 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 02A8 // USART Receiver: On
; 0000 02A9 // USART Transmitter: On
; 0000 02AA // USART Mode: Asynchronous
; 0000 02AB // USART Baud Rate: 9600
; 0000 02AC UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
; 0000 02AD UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
; 0000 02AE UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
; 0000 02AF UBRRH=0x00;
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
; 0000 02B0 UBRRL=0x33;
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
; 0000 02B1 
; 0000 02B2 // Analog Comparator initialization
; 0000 02B3 // Analog Comparator: Off
; 0000 02B4 // The Analog Comparator's positive input is
; 0000 02B5 // connected to the AIN0 pin
; 0000 02B6 // The Analog Comparator's negative input is
; 0000 02B7 // connected to the AIN1 pin
; 0000 02B8 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
; 0000 02B9 SFIOR=(0<<ACME);
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
; 0000 02BA 
; 0000 02BB // ADC initialization
; 0000 02BC // ADC disabled
; 0000 02BD ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
; 0000 02BE 
; 0000 02BF // SPI initialization
; 0000 02C0 // SPI disabled
; 0000 02C1 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
; 0000 02C2 
; 0000 02C3 // TWI initialization
; 0000 02C4 // TWI disabled
; 0000 02C5 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
; 0000 02C6 
; 0000 02C7 // Global enable interrupts
; 0000 02C8 #asm("sei")
;PCODE: $0000049D VOL: 0
	sei
;PCODE: $0000049E VOL: 0
; 0000 02C9 lcd_init();
;PCODE: $0000049F VOL: 0
; 0000 02CA set_my_id();
;PCODE: $000004A0 VOL: 0
; 0000 02CB while (1)
;PCODE: $000004A1 VOL: 0
; 0000 02CC       {
; 0000 02CD         //lcd_send_char('A');
; 0000 02CE       // Place your code here
; 0000 02CF         receive();
;PCODE: $000004A2 VOL: 0
; 0000 02D0         receive_command();
;PCODE: $000004A3 VOL: 0
; 0000 02D1       }
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
; 0000 02D2 }
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
